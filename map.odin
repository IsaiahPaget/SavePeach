package main

import rl "vendor:raylib"

BLOCK_SIZE :: 40
SCREEN_WIDTH :: 1600
SCREEN_HEIGHT :: 1200

GAME_MAP: [SCREEN_HEIGHT / BLOCK_SIZE][SCREEN_WIDTH / BLOCK_SIZE]string = {
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," ","F"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," ","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X"," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," ","X","X","X","X","X","X"," "," ","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X"," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," ","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X"," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "},
    {" "," "," "," "," "," ","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X"," "," "," ","H"," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," ","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X"," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" "," "," ","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X","X"," "," "," "," "," "," "," "},
    {" "," "," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
    {" ","P"," "," "," "," "," "," "," ","H"," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "," "},
}

BLOCK_MAP := map[string]string {
    "P" = "player",
    "H" = "ladder",
    "X" = "platform",
    "F" = "flag",
}

init_map :: proc(env: ^Env, player: ^Player) {
    for row, i in GAME_MAP {
        for col, j in row {
            if col == " " {
                continue
            }

            switch BLOCK_MAP[col] {
                case "player": {
                    player.pos = {f32(j * BLOCK_SIZE), f32(i * BLOCK_SIZE)} 
                }
                case "platform": {
                    platform: Platform = {
                        {f32(j * BLOCK_SIZE), f32(i * BLOCK_SIZE)}, 
                        {BLOCK_SIZE, BLOCK_SIZE}, 
                        rl.BROWN
                    }
                    append(&env.platforms, platform)
                }
                case "ladder": {
                    ladder := Ladder {
                        {f32(j * BLOCK_SIZE), f32(i * BLOCK_SIZE)}, 
                        {BLOCK_SIZE, BLOCK_SIZE}, 
                        rl.ORANGE
                    }
                    append(&env.ladders, ladder)
                }
                case "flag": {
                    flag := Flag {
                        {
                            f32(j * BLOCK_SIZE), 
                            f32(i * BLOCK_SIZE),
                            BLOCK_SIZE,
                            BLOCK_SIZE
                        }, 
                        rl.PINK
                    }
                    env.flag = flag
                }
            }
        }
    } 
}
